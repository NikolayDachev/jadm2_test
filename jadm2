#!/usr/bin/env python
########################################################################################
# Jadm license information
#
'''
Copyright (c) <2015>, <Nikolay Georgiev Dachev> <nikolay@dachev.info>
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'''
########################################################################################
# Python modules
# datetime - used for current date/time on event
# tabulate - used to print useful infomration in table format
# os, sys, subprocess - used for comunication with FreeBSD
# netifaces - used for check FreeBSD bridge interfaces
# ipaddress - used to check if jail ip is from gateway network
# cmd - used for jadm command shell
# paramiko - used for jail migration via ssh
# socket - jadm client/server
# AES - aes encryption
# base64 aes encription help

from datetime import datetime
from tabulate import tabulate
from ipaddress import *
import os
import sys
import subprocess
import netifaces
import cmd
import paramiko
import socket
from Crypto.Cipher import AES
import base64

########################################################################################
# Main config vars:
########################################################################################

# jadm version
jadm_version = "ver. 2.0"

# jail.conf location by default /etc/jail.conf
jailconf = '/etc/jail.conf'

# jadm log file
logfile = '/var/log/jadm.log'

# empty vars
bridge_int = ''
jzfs = ''
jpath = ''

# jadm don't show verbose output by defult
verbose = 0

# settings start index in jail.conf
_Gsettings = '#global_settings@'
_Lsettings = '#local_settings@'

# jadm server
LHOST = '0.0.0.0'
LPORT = 4555

# network config
# newmac generate random mac address option in jail.conf
newmac = "$newmac = \"dd if=/dev/urandom bs=1024 count=1 2>/dev/null|md5|sed 's/^\\\\(..\\\\)\\\\(..\\\\)\\\\(..\\\\).*$/02\\\\:ff\\\\:c0\\\\:\\\\1:\\\\2:\\\\3/'\";"

# vnet
vnet = [
'#network_settings@',
'vnet;',
'vnet.interface = "epair${jid}b";',
newmac,
'exec.start = "ifconfig lo0 127.0.0.1/8";',
'exec.prestart = "ifconfig epair${jid} create";',
'exec.prestart += "$newmac |xargs ifconfig epair${jid}b ether";',
'exec.prestart += "ifconfig $bridge addm epair${jid}a up";',
'exec.prestart += "ifconfig epair${jid}a up";',
'exec.start += "ifconfig epair${jid}b $jip";',
'exec.start += "route add default $jgw";',
'exec.start += "/bin/sh /etc/rc";',
'exec.poststop = "ifconfig $bridge deletem epair${jid}a";',
'exec.poststop += "ifconfig epair${jid}a destroy";',
'exec.stop = "/bin/sh /etc/rc.shutdown";',
'exec.clean;',
'persist;'
]

# no vnet
net = [
'#network_settings@',
'ip4.addr = "$jip";',
'exec.start = "/bin/sh /etc/rc";',
'exec.stop = "/bin/sh /etc/rc.shutdown";',
'persist;',
]

########################################################################################
# Main Functions
########################################################################################

def load_jail_config(conf_f):
   """
########################################################################################
# load_jail_config - load default jail conf file and return a list with jail dictionary .
#  {'name':'jail name', 'host.hostname':'jail hostname', 'jid':'jail id', '$jip':'jail ip address ',
#  '$jgw':'jail gateway','path':'jail home dir', 'vnet':'is this vnet jail', 'zfs':'is thi zfs jail'}
#
   """
# open jail.conf
   jc = open(conf_f, 'r')

# take all elements from jail.conf, remove "junk" data and applay to mas[]
# only data which will be used is taken, all valuse are in order
   mas = []
   not_sorted_mas = []
   for i in jc:
      i = i.strip('\n')
# create raw list from file ony \n is removed
      not_sorted_mas.append(i)
      i = i.strip(';').replace('\"', '').replace(' ', '')
      i = i.split('=')
      mas.append(i)
   jc.close()

# find all jails names
   jsname = []
# enumerate in order to avoid wrong index for similiar items like {
# take only elements which are before { symbol
   for i, x in enumerate(mas):
      if "{" in x:
        jsname.append([mas[i - 1]])

# Jails Configuration in dict format.
   jails = []

   for i in jsname:
      jail_dict = {'name':i[0][0], 'host.hostname':'', 'jid':'', '$jip':'',
                   '$jgw':'','path':''}

      i = mas.index(i[0])
      jail_dict['jbegin'] = i

# Cehck jail index's (end and local_settigs)
      x = 0
      jail_local_settings_index = 0
      for z in mas[jail_dict['jbegin']:]:
         x = x + 1
# Find jail local settingss
         if z[0] == _Lsettings:
            jail_local_settings_index = jail_dict['jbegin'] + x

# Find jail end index
         if "}" in z:
            x -= 1
            jail_dict['jend'] = jail_dict['jbegin'] + x
            break

# add local settings index on firs place in list (us original jc[] )
      jlsettings_list = []
      jlsettings_list.append(jail_local_settings_index)

      for x in not_sorted_mas[jail_local_settings_index : jail_dict['jend']]:
          jlsettings_list.append(x)
      jail_dict['local_settings'] = jlsettings_list

# All main jail settings
      for x in mas[jail_dict['jbegin']:jail_dict['jend']]:
         if x[0] in jail_dict.keys():
            jail_dict[x[0]] = x[1]

# is this a vnet jail ?
         if x[0] == 'vnet':
            jail_dict['vnet'] = 1
         elif x[0] == 'ip4.addr':
            jail_dict['vnet'] = 0

# do we have a bridge interface?
         if x[0] == '$bridge':
            jail_dict['$bridge'] = x[1]

# is this zfs jail ?
         if x[0] == 'path':
             zfs_check = zfs(x[1])
             jail_dict['zfs'] = zfs_check[2]

# end add this jail and go with the next one
      jails.append(jail_dict)

# find all jail.conf global settings
   global_settings = []
   for i in mas:
       if i[0] == _Gsettings:
           gb = mas.index(i) + 1
           global_settings.append(gb)
       if i[0] == _Gsettings + '@':
           ge = mas.index(i)
           global_settings.append(ge)

   for i in not_sorted_mas[global_settings[0]:global_settings[1]]:
       global_settings.append(i)


# return a list with all jails from jail.conf and list with all global settings

   return (jails, global_settings)

def zfs(zvalue = None):
   """
########################################################################################
# check if zvalue is in OS zfs list (mountpoint or zfs name)
# return (zfs names, zfs mountpoints, zfs ( 0 if not exist))
#
   """
# check curent zfs pool
   zfs_name = subprocess.check_output("zfs list -H -o name", shell=True)
   zfs_name = zfs_name.split('\n')

   zfs_mountp = subprocess.check_output("zfs list -H -o mountpoint", shell=True)
   zfs_mountp = zfs_mountp.split('\n')

# check if zvalue is in zfs(path or mountpoint)
   iszfs = 0
   if zvalue in zfs_mountp:
      iszfs = subprocess.check_output("zfs list -H %s" % zvalue, shell=True)
      iszfs = iszfs.strip('\n').split('\t')

   return (zfs_name, zfs_mountp, iszfs)

########################################################################################
# Start Jadm script
########################################################################################

print " "
jails =  load_jail_config(jailconf)[0]
global_settings = load_jail_config(jailconf)[1]

for x in jails:
   if x['name']  == 'test1':
      print x
      print x.keys()

print global_settings

########################################################################################
# End Jadm script
########################################################################################